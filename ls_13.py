#Задача 2. Одним действием виполнить intersection
set1 = {1, 2, 3, 4}
set2 = {2, 3, 5, 6}
set3 = {3, 4, 6, 7}
print((set1 & set2) | (set1 & set3) |(set2 & set3))

#Задача 3. Одним действием виполнить difference
set1 = {1, 2, 3, 4}
set2 = {2, 3, 5, 6}
set3 = {3, 4, 6, 7}
print((set1 - set2) | (set2 - set1) | (set1 - set3) | (set3 - set1) | (set2 - set3) | (set3 - set2))

#Задача 4. Одним действием виполнить union
set1 = {1, 2, 3, 4}
set2 = {2, 3, 5, 6}
set3 = {3, 4, 6, 7}
print(set1 | set2 | set3)

#Задача 5. Добавить список элементов к заданному набору
sampleSet = {"Yellow", "Orange", "Black"}
sampleList = ["Blue", "Green", "Red"]
sampleSet.update(color for color in sampleList)
print(sampleSet)

#Задача 6. Вернуть новый набор идентичных предметов из заданных двух наборов
set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set3 = set1.intersection(set2)
print(set3)

#Задача 7. Возвращает новый набор со всеми элементами из обоих наборов, удаляя дубликаты.
set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set3 = set1.union(set2)
print(set3)

#Задача 8. Учитывая два набора Python, обновите первый набор элементами,
# которые существуют только в первом наборе, но не во втором наборе
set1 = {10, 20, 30}
set2 = {20, 40, 50}
set1.difference_update(set2)
print(set1)

#Задача 9. Удалите єлементи 10, 20, 30 из следующего набора
set1 = {10, 20, 30, 40, 50}
set1.difference_update({10,20,30})
print(set1)

#Задача 11. Проверьте, есть ли в двух наборах какие-либо общие элементы.
set1 = {10, 20, 30, 40, 50}
set2 = {60, 70, 80, 90, 10}
print(set1.intersection(set2))

#Задача 12. Обновите набор 1, добавив элементы из набора 2
set1 = {10, 20, 30, 40, 50}
set2 = {60, 70, 80, 90, 10}
set1.update(set2)
print(set1)

#Задача 13. Удалите элементы из set1, которые не являются общими для set1 и set2
set1 = {10, 20, 30, 40, 50}
set2 = {30, 40, 50, 60, 70}
set1.intersection_update(set2)
print(set1)
